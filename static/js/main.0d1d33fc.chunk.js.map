{"version":3,"sources":["context.js","components/Contacts/Contact.js","components/Contacts/Contacts.js","components/layout/Header.js","components/pages/About.js","components/layout/TextInputGroup.js","components/Contacts/AddContact.js","components/Contacts/EditContact.js","components/pages/NotFound.js","components/Test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","email","phone","className","onClick","style","cursor","float","color","bind","to","marginRight","Contacts","Fragment","key","Header","branding","href","defaultProps","About","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onSubmit","e","preventDefault","newConatct","post","history","push","target","EditContact","updConatct","match","params","put","class","Test","title","body","fetch","then","response","json","App","exact","path","component","NotFound","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0d1d33fc.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state,action) => {\r\n    switch(action.type) {\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact =>\r\n                    contact.id !==action.payload)\r\n            }\r\n            case 'ADD_CONTACT':\r\n                return {\r\n                    ...state,\r\n                    contacts: [action.payload, \r\n                        ...state.contacts]\r\n                }\r\n            \r\n            case 'UPDATE_CONTACT':\r\n                return {\r\n                    ...state,\r\n                    contacts: state.contacts.map(contact => \r\n                        contact.id === action.payload.id ? \r\n                        (contact = action.payload) : contact)\r\n                }\r\n            \r\n            default:\r\n                return state;\r\n            \r\n    }\r\n}\r\n\r\nexport class Provider extends Component {\r\n    state = {\r\n        contacts: [],\r\n        dispatch: action => this.setState(state => reducer(state, action))\r\n    };\r\n\r\n    async componentDidMount() {\r\n            const res = await axios\r\n\r\n            .get('https://jsonplaceholder.typicode.com/users')\r\n\r\n            this.setState({contacts: res.data});\r\n        }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n\r\n","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { Consumer } from '../../context';\r\nimport axios from 'axios'\r\n\r\nclass Contact extends Component {\r\n    state = {\r\n        showContactInfo: false\r\n    };\r\n\r\n    onDeleteClick = async(id, dispatch) => {\r\n    try{\r\n    const res = await axios\r\n    .delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n\r\n    dispatch({ type: 'DELETE_CONTACT',payload: id })\r\n    }\r\n    catch(e) {\r\n        dispatch({ type: 'DELETE_CONTACT',payload: id })\r\n    }\r\n}\r\n\r\n    render() {\r\n        const { id, name, email, phone } = this.props.contact;\r\n        const { showContactInfo } = this.state;\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card card-body mb-3 left\">\r\n                            <h4>{name}{' '}\r\n                                <i onClick={() => this.setState({\r\n                                    showContactInfo:\r\n                                        !this.state.showContactInfo\r\n                                })}\r\n                                    className=\"fas fa-sort-down\"\r\n                                    style={{ cursor: 'pointer' }} />\r\n                                <i className=\"fas fa-times\"\r\n                                    style={{ cursor: 'pointer', float: 'right', color: 'red' }}\r\n                                    onClick={this.onDeleteClick.bind(this, id, dispatch)} />\r\n\r\n                                <Link to = {`contact/edit/${id}`}>\r\n                                <i \r\n                                className=\"fas fa-pen\"\r\n                                style = {{\r\n                                    cursor:'pointer',\r\n                                    float: 'right',\r\n                                    color: 'black',\r\n                                    marginRight:'1rem'\r\n                                }}\r\n                                ></i>\r\n                                </Link> \r\n                                \r\n                            </h4>\r\n                            {showContactInfo ? (<ul className=\"list-group\">\r\n                                <li className=\"list-group-item\">Email: {email}</li>\r\n                                <li className=\"list-group-item\">Phone: {phone}</li>\r\n                            </ul>) : null}\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n\r\n};\r\nexport default Contact;\r\n","import React, { Component } from 'react'\r\nimport Contact from './Contact'\r\nimport {  Consumer } from '../../context'\r\n\r\nclass Contacts extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { contacts } = value;\r\n                    return (\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\">\r\n                                <span\r\n                                className = \"text-danger\">Contact</span> List {' '}\r\n                                <i className=\"fas fa-book\"\r\n                                style={{\r\n                                    color:'lightgrey'\r\n                                }}></i>\r\n                            </h1>\r\n                            {contacts.map(contact => (\r\n                                <Contact\r\n                                    key={contact.id}\r\n                                    contact={contact}/>\r\n                            ))}\r\n                        </React.Fragment>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default Contacts; ","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link} from 'react-router-dom';\r\n\r\n\r\nconst Header = (props) => {\r\n    const { branding } = props;\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">{branding}</a>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\">\r\n                                <i className = \"fas fa-home\"></i> Home\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/add\" className=\"nav-link\">\r\n                            <i className = \"fas fa-plus\"></i>Add\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\">\r\n                            <i className = \"fas fa-question\"></i>About\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n};\r\n\r\nHeader.defaultProps = {\r\n    branding: 'MY APP'\r\n};\r\n\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div>\r\n            <h1 className =\"display-4\"><span className =\"text-danger\">About</span> Contact Manager</h1>\r\n            <p className = \"lead\">Simple app to manage contacts</p>\r\n            <p className = \"text-secondary\">Version 1.0.0</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\n\r\n\r\nconst TextInputGroup = ({\r\n    label,\r\n    name,\r\n    value,\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    error\r\n}) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input\r\n                type={type}\r\n                name={name}\r\n                className={classnames('form-control form-control-lg', {\r\n                    'is-invalid': error\r\n                })}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n            {error && <div className=\"invalid-feedback\">\r\n            {error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string\r\n}\r\nTextInputGroup.defaultProps = {\r\n    type : 'text'\r\n}\r\n\r\nexport default TextInputGroup; \r\n","import React, { Component } from 'react'\r\nimport { Consumer } from '../../context'\r\nimport TextInputGroup from '../layout/TextInputGroup'\r\nimport axios from 'axios'\r\n\r\nclass AddContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n\r\n    onSubmit = async(dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const { name, email, phone } = this.state;\r\n        // check for errors \r\n        if (name === '') {\r\n            this.setState({ errors: { name: 'Name is required' } });\r\n            return;\r\n        }\r\n\r\n        if (email === '') {\r\n            this.setState({ errors: { email: 'Email is required' } });\r\n            return;\r\n        }\r\n\r\n        if (phone === '') {\r\n            this.setState({ errors: { phone: 'Phone is required' } });\r\n            return;\r\n        }\r\n\r\n\r\n        const newConatct = {\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        const res = await axios\r\n            .post\r\n            ('https://jsonplaceholder.typicode.com/users', newConatct)\r\n\r\n        dispatch({ type: 'ADD_CONTACT', payload: res.data })\r\n\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: ''\r\n        });\r\n\r\n        //Clear State\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Add Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind\r\n                                    (this, dispatch)}>\r\n\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter Name\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter Email\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"Enter phone\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n                                     <input\r\n                                        type=\"submit\"\r\n                                        value=\"Add Contact\"\r\n                                        className=\"btn btn-danger btn-block\" />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\nexport default AddContact;","import React, { Component } from 'react'\r\nimport { Consumer } from '../../context'\r\nimport TextInputGroup from '../layout/TextInputGroup'\r\nimport axios from 'axios'\r\n\r\nclass EditContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const { id } = this.props.match.params;\r\n        const res = await axios.get\r\n        (`https://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n        const contact = res.data;\r\n\r\n    this.setState({\r\n        name: contact.name,\r\n        email:contact.email,\r\n        phone:contact.phone \r\n    });       \r\n    }\r\n\r\n    onSubmit = async(dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const { name, email, phone } = this.state;\r\n        // check for errors \r\n        if (name === '') {\r\n            this.setState({ errors: { name: 'Name is required' } });\r\n            return;\r\n        }\r\n\r\n        if (email === '') {\r\n            this.setState({ errors: { email: 'Email is required' } });\r\n            return;\r\n        }\r\n\r\n        if (phone === '') {\r\n            this.setState({ errors: { phone: 'Phone is required' } });\r\n            return;\r\n        }\r\n\r\n\r\n        const updConatct = {\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        const { id } = this.props.match.params;\r\n        const res = await axios.put\r\n        (`https://jsonplaceholder.typicode.com/users/${id}`, updConatct);\r\n\r\n        dispatch({type: 'UPDATE_CONTACT', payload:res.data});\r\n\r\n        //Clear State\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Edit Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind\r\n                                    (this, dispatch)}>\r\n\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter Name\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter Email\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"Enter phone\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n\r\n                                    <input\r\n                                        type=\"submit\"\r\n                                        value=\"Update Contact\"\r\n                                        className=\"btn btn-danger btn-block\" />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\nexport default EditContact;","import React from 'react';\r\n\r\nexport default () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">\r\n            <i class=\"fas fa-skull fa-lg\" \r\n            style={{color:'black'}}></i>\r\n            <span className=\"text-danger\">  404</span> Page Not Found</h1>\r\n            <p className=\"lead\">Sorry, that page does not exist</p>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Test extends Component {\r\n    state = {\r\n        title:'',\r\n        body: ''\r\n    };\r\n\r\n\r\n\r\n        componentDidMount() {\r\n            fetch('https://jsonplaceholder.typicode.com/todos/1')\r\n            .then(response => response.json())\r\n            .then(data => this.setState({\r\n                title: data.title,\r\n                body: data.body\r\n            }))\r\n        };\r\n\r\n\r\n    render() {\r\n        const { title, body} = this.state;\r\n        return (\r\n            <div>\r\n                <h1>{title}</h1>\r\n                <p>{body}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Contacts from './components/Contacts/Contacts';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport AddContact from './components/Contacts/AddContact';\nimport EditContact from './components/Contacts/EditContact';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from './context';\nimport NotFound from './components/pages/NotFound';\nimport Test from './components/Test/Test';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <Router>\n        <div className=\"App left\">\n          <Header branding='Contact Manager' />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path ='/' component = {Contacts}/>\n              <Route exact path ='/contact/add' component = {AddContact}/>\n              <Route exact path ='/contact/edit/:id' component = {EditContact}/>\n              <Route exact path ='/about' component = {About}/>\n              <Route exact path = '/test' component = {Test}/>\n              <Route component ={NotFound}/>\n            </Switch>\n          </div>\n        </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}